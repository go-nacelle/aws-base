// Code generated by github.com/efritz/go-mockgen 0.1.0; DO NOT EDIT.
// This file was generated by robots at
// 2019-06-21T14:12:33-05:00
// using the command
// $ go-mockgen -f github.com/go-nacelle/lambdabase -i sqsEventHandlerInitializer -i sqsMessageHandlerInitializer -o sqs_mock_test.go

package lambdabase

import (
	"context"
	events "github.com/aws/aws-lambda-go/events"
	config "github.com/go-nacelle/config"
	log "github.com/go-nacelle/log"
	"sync"
)

// MockSqsEventHandlerInitializer is a mock implementation of the
// sqsEventHandlerInitializer interface (from the package
// github.com/go-nacelle/lambdabase) used for unit testing.
type MockSqsEventHandlerInitializer struct {
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *SqsEventHandlerInitializerHandleFunc
	// InitFunc is an instance of a mock function object controlling the
	// behavior of the method Init.
	InitFunc *SqsEventHandlerInitializerInitFunc
}

// NewMockSqsEventHandlerInitializer creates a new mock of the
// sqsEventHandlerInitializer interface. All methods return zero values for
// all results, unless overwritten.
func NewMockSqsEventHandlerInitializer() *MockSqsEventHandlerInitializer {
	return &MockSqsEventHandlerInitializer{
		HandleFunc: &SqsEventHandlerInitializerHandleFunc{
			defaultHook: func(context.Context, []events.SQSMessage, log.Logger) error {
				return nil
			},
		},
		InitFunc: &SqsEventHandlerInitializerInitFunc{
			defaultHook: func(config.Config) error {
				return nil
			},
		},
	}
}

// surrogateMockSqsEventHandlerInitializer is a copy of the
// sqsEventHandlerInitializer interface (from the package
// github.com/go-nacelle/lambdabase). It is redefined here as it is
// unexported in the source package.
type surrogateMockSqsEventHandlerInitializer interface {
	Handle(context.Context, []events.SQSMessage, log.Logger) error
	Init(config.Config) error
}

// NewMockSqsEventHandlerInitializerFrom creates a new mock of the
// MockSqsEventHandlerInitializer interface. All methods delegate to the
// given implementation, unless overwritten.
func NewMockSqsEventHandlerInitializerFrom(i surrogateMockSqsEventHandlerInitializer) *MockSqsEventHandlerInitializer {
	return &MockSqsEventHandlerInitializer{
		HandleFunc: &SqsEventHandlerInitializerHandleFunc{
			defaultHook: i.Handle,
		},
		InitFunc: &SqsEventHandlerInitializerInitFunc{
			defaultHook: i.Init,
		},
	}
}

// SqsEventHandlerInitializerHandleFunc describes the behavior when the
// Handle method of the parent MockSqsEventHandlerInitializer instance is
// invoked.
type SqsEventHandlerInitializerHandleFunc struct {
	defaultHook func(context.Context, []events.SQSMessage, log.Logger) error
	hooks       []func(context.Context, []events.SQSMessage, log.Logger) error
	history     []SqsEventHandlerInitializerHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSqsEventHandlerInitializer) Handle(v0 context.Context, v1 []events.SQSMessage, v2 log.Logger) error {
	r0 := m.HandleFunc.nextHook()(v0, v1, v2)
	m.HandleFunc.appendCall(SqsEventHandlerInitializerHandleFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockSqsEventHandlerInitializer instance is invoked and the hook
// queue is empty.
func (f *SqsEventHandlerInitializerHandleFunc) SetDefaultHook(hook func(context.Context, []events.SQSMessage, log.Logger) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockSqsEventHandlerInitializer instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *SqsEventHandlerInitializerHandleFunc) PushHook(hook func(context.Context, []events.SQSMessage, log.Logger) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *SqsEventHandlerInitializerHandleFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, []events.SQSMessage, log.Logger) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *SqsEventHandlerInitializerHandleFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, []events.SQSMessage, log.Logger) error {
		return r0
	})
}

func (f *SqsEventHandlerInitializerHandleFunc) nextHook() func(context.Context, []events.SQSMessage, log.Logger) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SqsEventHandlerInitializerHandleFunc) appendCall(r0 SqsEventHandlerInitializerHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SqsEventHandlerInitializerHandleFuncCall
// objects describing the invocations of this function.
func (f *SqsEventHandlerInitializerHandleFunc) History() []SqsEventHandlerInitializerHandleFuncCall {
	f.mutex.Lock()
	history := make([]SqsEventHandlerInitializerHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SqsEventHandlerInitializerHandleFuncCall is an object that describes an
// invocation of method Handle on an instance of
// MockSqsEventHandlerInitializer.
type SqsEventHandlerInitializerHandleFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []events.SQSMessage
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 log.Logger
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SqsEventHandlerInitializerHandleFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SqsEventHandlerInitializerHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SqsEventHandlerInitializerInitFunc describes the behavior when the Init
// method of the parent MockSqsEventHandlerInitializer instance is invoked.
type SqsEventHandlerInitializerInitFunc struct {
	defaultHook func(config.Config) error
	hooks       []func(config.Config) error
	history     []SqsEventHandlerInitializerInitFuncCall
	mutex       sync.Mutex
}

// Init delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSqsEventHandlerInitializer) Init(v0 config.Config) error {
	r0 := m.InitFunc.nextHook()(v0)
	m.InitFunc.appendCall(SqsEventHandlerInitializerInitFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Init method of the
// parent MockSqsEventHandlerInitializer instance is invoked and the hook
// queue is empty.
func (f *SqsEventHandlerInitializerInitFunc) SetDefaultHook(hook func(config.Config) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Init method of the parent MockSqsEventHandlerInitializer instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *SqsEventHandlerInitializerInitFunc) PushHook(hook func(config.Config) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *SqsEventHandlerInitializerInitFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(config.Config) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *SqsEventHandlerInitializerInitFunc) PushReturn(r0 error) {
	f.PushHook(func(config.Config) error {
		return r0
	})
}

func (f *SqsEventHandlerInitializerInitFunc) nextHook() func(config.Config) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SqsEventHandlerInitializerInitFunc) appendCall(r0 SqsEventHandlerInitializerInitFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SqsEventHandlerInitializerInitFuncCall
// objects describing the invocations of this function.
func (f *SqsEventHandlerInitializerInitFunc) History() []SqsEventHandlerInitializerInitFuncCall {
	f.mutex.Lock()
	history := make([]SqsEventHandlerInitializerInitFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SqsEventHandlerInitializerInitFuncCall is an object that describes an
// invocation of method Init on an instance of
// MockSqsEventHandlerInitializer.
type SqsEventHandlerInitializerInitFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 config.Config
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SqsEventHandlerInitializerInitFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SqsEventHandlerInitializerInitFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockSqsMessageHandlerInitializer is a mock implementation of the
// sqsMessageHandlerInitializer interface (from the package
// github.com/go-nacelle/lambdabase) used for unit testing.
type MockSqsMessageHandlerInitializer struct {
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *SqsMessageHandlerInitializerHandleFunc
	// InitFunc is an instance of a mock function object controlling the
	// behavior of the method Init.
	InitFunc *SqsMessageHandlerInitializerInitFunc
}

// NewMockSqsMessageHandlerInitializer creates a new mock of the
// sqsMessageHandlerInitializer interface. All methods return zero values
// for all results, unless overwritten.
func NewMockSqsMessageHandlerInitializer() *MockSqsMessageHandlerInitializer {
	return &MockSqsMessageHandlerInitializer{
		HandleFunc: &SqsMessageHandlerInitializerHandleFunc{
			defaultHook: func(context.Context, events.SQSMessage, log.Logger) error {
				return nil
			},
		},
		InitFunc: &SqsMessageHandlerInitializerInitFunc{
			defaultHook: func(config.Config) error {
				return nil
			},
		},
	}
}

// surrogateMockSqsMessageHandlerInitializer is a copy of the
// sqsMessageHandlerInitializer interface (from the package
// github.com/go-nacelle/lambdabase). It is redefined here as it is
// unexported in the source package.
type surrogateMockSqsMessageHandlerInitializer interface {
	Handle(context.Context, events.SQSMessage, log.Logger) error
	Init(config.Config) error
}

// NewMockSqsMessageHandlerInitializerFrom creates a new mock of the
// MockSqsMessageHandlerInitializer interface. All methods delegate to the
// given implementation, unless overwritten.
func NewMockSqsMessageHandlerInitializerFrom(i surrogateMockSqsMessageHandlerInitializer) *MockSqsMessageHandlerInitializer {
	return &MockSqsMessageHandlerInitializer{
		HandleFunc: &SqsMessageHandlerInitializerHandleFunc{
			defaultHook: i.Handle,
		},
		InitFunc: &SqsMessageHandlerInitializerInitFunc{
			defaultHook: i.Init,
		},
	}
}

// SqsMessageHandlerInitializerHandleFunc describes the behavior when the
// Handle method of the parent MockSqsMessageHandlerInitializer instance is
// invoked.
type SqsMessageHandlerInitializerHandleFunc struct {
	defaultHook func(context.Context, events.SQSMessage, log.Logger) error
	hooks       []func(context.Context, events.SQSMessage, log.Logger) error
	history     []SqsMessageHandlerInitializerHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSqsMessageHandlerInitializer) Handle(v0 context.Context, v1 events.SQSMessage, v2 log.Logger) error {
	r0 := m.HandleFunc.nextHook()(v0, v1, v2)
	m.HandleFunc.appendCall(SqsMessageHandlerInitializerHandleFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockSqsMessageHandlerInitializer instance is invoked and the hook
// queue is empty.
func (f *SqsMessageHandlerInitializerHandleFunc) SetDefaultHook(hook func(context.Context, events.SQSMessage, log.Logger) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockSqsMessageHandlerInitializer instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *SqsMessageHandlerInitializerHandleFunc) PushHook(hook func(context.Context, events.SQSMessage, log.Logger) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *SqsMessageHandlerInitializerHandleFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, events.SQSMessage, log.Logger) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *SqsMessageHandlerInitializerHandleFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, events.SQSMessage, log.Logger) error {
		return r0
	})
}

func (f *SqsMessageHandlerInitializerHandleFunc) nextHook() func(context.Context, events.SQSMessage, log.Logger) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SqsMessageHandlerInitializerHandleFunc) appendCall(r0 SqsMessageHandlerInitializerHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SqsMessageHandlerInitializerHandleFuncCall
// objects describing the invocations of this function.
func (f *SqsMessageHandlerInitializerHandleFunc) History() []SqsMessageHandlerInitializerHandleFuncCall {
	f.mutex.Lock()
	history := make([]SqsMessageHandlerInitializerHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SqsMessageHandlerInitializerHandleFuncCall is an object that describes an
// invocation of method Handle on an instance of
// MockSqsMessageHandlerInitializer.
type SqsMessageHandlerInitializerHandleFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 events.SQSMessage
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 log.Logger
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SqsMessageHandlerInitializerHandleFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SqsMessageHandlerInitializerHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SqsMessageHandlerInitializerInitFunc describes the behavior when the Init
// method of the parent MockSqsMessageHandlerInitializer instance is
// invoked.
type SqsMessageHandlerInitializerInitFunc struct {
	defaultHook func(config.Config) error
	hooks       []func(config.Config) error
	history     []SqsMessageHandlerInitializerInitFuncCall
	mutex       sync.Mutex
}

// Init delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSqsMessageHandlerInitializer) Init(v0 config.Config) error {
	r0 := m.InitFunc.nextHook()(v0)
	m.InitFunc.appendCall(SqsMessageHandlerInitializerInitFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Init method of the
// parent MockSqsMessageHandlerInitializer instance is invoked and the hook
// queue is empty.
func (f *SqsMessageHandlerInitializerInitFunc) SetDefaultHook(hook func(config.Config) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Init method of the parent MockSqsMessageHandlerInitializer instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *SqsMessageHandlerInitializerInitFunc) PushHook(hook func(config.Config) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *SqsMessageHandlerInitializerInitFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(config.Config) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *SqsMessageHandlerInitializerInitFunc) PushReturn(r0 error) {
	f.PushHook(func(config.Config) error {
		return r0
	})
}

func (f *SqsMessageHandlerInitializerInitFunc) nextHook() func(config.Config) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SqsMessageHandlerInitializerInitFunc) appendCall(r0 SqsMessageHandlerInitializerInitFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SqsMessageHandlerInitializerInitFuncCall
// objects describing the invocations of this function.
func (f *SqsMessageHandlerInitializerInitFunc) History() []SqsMessageHandlerInitializerInitFuncCall {
	f.mutex.Lock()
	history := make([]SqsMessageHandlerInitializerInitFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SqsMessageHandlerInitializerInitFuncCall is an object that describes an
// invocation of method Init on an instance of
// MockSqsMessageHandlerInitializer.
type SqsMessageHandlerInitializerInitFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 config.Config
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SqsMessageHandlerInitializerInitFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SqsMessageHandlerInitializerInitFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
