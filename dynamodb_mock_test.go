// Code generated by go-mockgen 1.3.5; DO NOT EDIT.

package lambdabase

import (
	"context"
	"sync"

	events "github.com/aws/aws-lambda-go/events"
	v2 "github.com/go-nacelle/log/v2"
)

// MockDynamoDBEventHandlerInitializer is a mock implementation of the
// dynamoDBEventHandlerInitializer interface (from the package
// github.com/go-nacelle/lambdabase) used for unit testing.
type MockDynamoDBEventHandlerInitializer struct {
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *DynamoDBEventHandlerInitializerHandleFunc
	// InitFunc is an instance of a mock function object controlling the
	// behavior of the method Init.
	InitFunc *DynamoDBEventHandlerInitializerInitFunc
}

// NewMockDynamoDBEventHandlerInitializer creates a new mock of the
// dynamoDBEventHandlerInitializer interface. All methods return zero values
// for all results, unless overwritten.
func NewMockDynamoDBEventHandlerInitializer() *MockDynamoDBEventHandlerInitializer {
	return &MockDynamoDBEventHandlerInitializer{
		HandleFunc: &DynamoDBEventHandlerInitializerHandleFunc{
			defaultHook: func(context.Context, []events.DynamoDBEventRecord, v2.Logger) (r0 error) {
				return
			},
		},
		InitFunc: &DynamoDBEventHandlerInitializerInitFunc{
			defaultHook: func(context.Context) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockDynamoDBEventHandlerInitializer creates a new mock of the
// dynamoDBEventHandlerInitializer interface. All methods panic on
// invocation, unless overwritten.
func NewStrictMockDynamoDBEventHandlerInitializer() *MockDynamoDBEventHandlerInitializer {
	return &MockDynamoDBEventHandlerInitializer{
		HandleFunc: &DynamoDBEventHandlerInitializerHandleFunc{
			defaultHook: func(context.Context, []events.DynamoDBEventRecord, v2.Logger) error {
				panic("unexpected invocation of MockDynamoDBEventHandlerInitializer.Handle")
			},
		},
		InitFunc: &DynamoDBEventHandlerInitializerInitFunc{
			defaultHook: func(context.Context) error {
				panic("unexpected invocation of MockDynamoDBEventHandlerInitializer.Init")
			},
		},
	}
}

// surrogateMockDynamoDBEventHandlerInitializer is a copy of the
// dynamoDBEventHandlerInitializer interface (from the package
// github.com/go-nacelle/lambdabase). It is redefined here as it is
// unexported in the source package.
type surrogateMockDynamoDBEventHandlerInitializer interface {
	Handle(context.Context, []events.DynamoDBEventRecord, v2.Logger) error
	Init(context.Context) error
}

// NewMockDynamoDBEventHandlerInitializerFrom creates a new mock of the
// MockDynamoDBEventHandlerInitializer interface. All methods delegate to
// the given implementation, unless overwritten.
func NewMockDynamoDBEventHandlerInitializerFrom(i surrogateMockDynamoDBEventHandlerInitializer) *MockDynamoDBEventHandlerInitializer {
	return &MockDynamoDBEventHandlerInitializer{
		HandleFunc: &DynamoDBEventHandlerInitializerHandleFunc{
			defaultHook: i.Handle,
		},
		InitFunc: &DynamoDBEventHandlerInitializerInitFunc{
			defaultHook: i.Init,
		},
	}
}

// DynamoDBEventHandlerInitializerHandleFunc describes the behavior when the
// Handle method of the parent MockDynamoDBEventHandlerInitializer instance
// is invoked.
type DynamoDBEventHandlerInitializerHandleFunc struct {
	defaultHook func(context.Context, []events.DynamoDBEventRecord, v2.Logger) error
	hooks       []func(context.Context, []events.DynamoDBEventRecord, v2.Logger) error
	history     []DynamoDBEventHandlerInitializerHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDynamoDBEventHandlerInitializer) Handle(v0 context.Context, v1 []events.DynamoDBEventRecord, v2 v2.Logger) error {
	r0 := m.HandleFunc.nextHook()(v0, v1, v2)
	m.HandleFunc.appendCall(DynamoDBEventHandlerInitializerHandleFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockDynamoDBEventHandlerInitializer instance is invoked and the
// hook queue is empty.
func (f *DynamoDBEventHandlerInitializerHandleFunc) SetDefaultHook(hook func(context.Context, []events.DynamoDBEventRecord, v2.Logger) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockDynamoDBEventHandlerInitializer instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *DynamoDBEventHandlerInitializerHandleFunc) PushHook(hook func(context.Context, []events.DynamoDBEventRecord, v2.Logger) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DynamoDBEventHandlerInitializerHandleFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, []events.DynamoDBEventRecord, v2.Logger) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DynamoDBEventHandlerInitializerHandleFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, []events.DynamoDBEventRecord, v2.Logger) error {
		return r0
	})
}

func (f *DynamoDBEventHandlerInitializerHandleFunc) nextHook() func(context.Context, []events.DynamoDBEventRecord, v2.Logger) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DynamoDBEventHandlerInitializerHandleFunc) appendCall(r0 DynamoDBEventHandlerInitializerHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// DynamoDBEventHandlerInitializerHandleFuncCall objects describing the
// invocations of this function.
func (f *DynamoDBEventHandlerInitializerHandleFunc) History() []DynamoDBEventHandlerInitializerHandleFuncCall {
	f.mutex.Lock()
	history := make([]DynamoDBEventHandlerInitializerHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DynamoDBEventHandlerInitializerHandleFuncCall is an object that describes
// an invocation of method Handle on an instance of
// MockDynamoDBEventHandlerInitializer.
type DynamoDBEventHandlerInitializerHandleFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []events.DynamoDBEventRecord
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 v2.Logger
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DynamoDBEventHandlerInitializerHandleFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DynamoDBEventHandlerInitializerHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DynamoDBEventHandlerInitializerInitFunc describes the behavior when the
// Init method of the parent MockDynamoDBEventHandlerInitializer instance is
// invoked.
type DynamoDBEventHandlerInitializerInitFunc struct {
	defaultHook func(context.Context) error
	hooks       []func(context.Context) error
	history     []DynamoDBEventHandlerInitializerInitFuncCall
	mutex       sync.Mutex
}

// Init delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDynamoDBEventHandlerInitializer) Init(v0 context.Context) error {
	r0 := m.InitFunc.nextHook()(v0)
	m.InitFunc.appendCall(DynamoDBEventHandlerInitializerInitFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Init method of the
// parent MockDynamoDBEventHandlerInitializer instance is invoked and the
// hook queue is empty.
func (f *DynamoDBEventHandlerInitializerInitFunc) SetDefaultHook(hook func(context.Context) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Init method of the parent MockDynamoDBEventHandlerInitializer instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *DynamoDBEventHandlerInitializerInitFunc) PushHook(hook func(context.Context) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DynamoDBEventHandlerInitializerInitFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DynamoDBEventHandlerInitializerInitFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context) error {
		return r0
	})
}

func (f *DynamoDBEventHandlerInitializerInitFunc) nextHook() func(context.Context) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DynamoDBEventHandlerInitializerInitFunc) appendCall(r0 DynamoDBEventHandlerInitializerInitFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DynamoDBEventHandlerInitializerInitFuncCall
// objects describing the invocations of this function.
func (f *DynamoDBEventHandlerInitializerInitFunc) History() []DynamoDBEventHandlerInitializerInitFuncCall {
	f.mutex.Lock()
	history := make([]DynamoDBEventHandlerInitializerInitFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DynamoDBEventHandlerInitializerInitFuncCall is an object that describes
// an invocation of method Init on an instance of
// MockDynamoDBEventHandlerInitializer.
type DynamoDBEventHandlerInitializerInitFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DynamoDBEventHandlerInitializerInitFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DynamoDBEventHandlerInitializerInitFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockDynamoDBRecordHandlerInitializer is a mock implementation of the
// dynamoDBRecordHandlerInitializer interface (from the package
// github.com/go-nacelle/lambdabase) used for unit testing.
type MockDynamoDBRecordHandlerInitializer struct {
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *DynamoDBRecordHandlerInitializerHandleFunc
	// InitFunc is an instance of a mock function object controlling the
	// behavior of the method Init.
	InitFunc *DynamoDBRecordHandlerInitializerInitFunc
}

// NewMockDynamoDBRecordHandlerInitializer creates a new mock of the
// dynamoDBRecordHandlerInitializer interface. All methods return zero
// values for all results, unless overwritten.
func NewMockDynamoDBRecordHandlerInitializer() *MockDynamoDBRecordHandlerInitializer {
	return &MockDynamoDBRecordHandlerInitializer{
		HandleFunc: &DynamoDBRecordHandlerInitializerHandleFunc{
			defaultHook: func(context.Context, events.DynamoDBEventRecord, v2.Logger) (r0 error) {
				return
			},
		},
		InitFunc: &DynamoDBRecordHandlerInitializerInitFunc{
			defaultHook: func(context.Context) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockDynamoDBRecordHandlerInitializer creates a new mock of the
// dynamoDBRecordHandlerInitializer interface. All methods panic on
// invocation, unless overwritten.
func NewStrictMockDynamoDBRecordHandlerInitializer() *MockDynamoDBRecordHandlerInitializer {
	return &MockDynamoDBRecordHandlerInitializer{
		HandleFunc: &DynamoDBRecordHandlerInitializerHandleFunc{
			defaultHook: func(context.Context, events.DynamoDBEventRecord, v2.Logger) error {
				panic("unexpected invocation of MockDynamoDBRecordHandlerInitializer.Handle")
			},
		},
		InitFunc: &DynamoDBRecordHandlerInitializerInitFunc{
			defaultHook: func(context.Context) error {
				panic("unexpected invocation of MockDynamoDBRecordHandlerInitializer.Init")
			},
		},
	}
}

// surrogateMockDynamoDBRecordHandlerInitializer is a copy of the
// dynamoDBRecordHandlerInitializer interface (from the package
// github.com/go-nacelle/lambdabase). It is redefined here as it is
// unexported in the source package.
type surrogateMockDynamoDBRecordHandlerInitializer interface {
	Handle(context.Context, events.DynamoDBEventRecord, v2.Logger) error
	Init(context.Context) error
}

// NewMockDynamoDBRecordHandlerInitializerFrom creates a new mock of the
// MockDynamoDBRecordHandlerInitializer interface. All methods delegate to
// the given implementation, unless overwritten.
func NewMockDynamoDBRecordHandlerInitializerFrom(i surrogateMockDynamoDBRecordHandlerInitializer) *MockDynamoDBRecordHandlerInitializer {
	return &MockDynamoDBRecordHandlerInitializer{
		HandleFunc: &DynamoDBRecordHandlerInitializerHandleFunc{
			defaultHook: i.Handle,
		},
		InitFunc: &DynamoDBRecordHandlerInitializerInitFunc{
			defaultHook: i.Init,
		},
	}
}

// DynamoDBRecordHandlerInitializerHandleFunc describes the behavior when
// the Handle method of the parent MockDynamoDBRecordHandlerInitializer
// instance is invoked.
type DynamoDBRecordHandlerInitializerHandleFunc struct {
	defaultHook func(context.Context, events.DynamoDBEventRecord, v2.Logger) error
	hooks       []func(context.Context, events.DynamoDBEventRecord, v2.Logger) error
	history     []DynamoDBRecordHandlerInitializerHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDynamoDBRecordHandlerInitializer) Handle(v0 context.Context, v1 events.DynamoDBEventRecord, v2 v2.Logger) error {
	r0 := m.HandleFunc.nextHook()(v0, v1, v2)
	m.HandleFunc.appendCall(DynamoDBRecordHandlerInitializerHandleFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockDynamoDBRecordHandlerInitializer instance is invoked and the
// hook queue is empty.
func (f *DynamoDBRecordHandlerInitializerHandleFunc) SetDefaultHook(hook func(context.Context, events.DynamoDBEventRecord, v2.Logger) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockDynamoDBRecordHandlerInitializer instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *DynamoDBRecordHandlerInitializerHandleFunc) PushHook(hook func(context.Context, events.DynamoDBEventRecord, v2.Logger) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DynamoDBRecordHandlerInitializerHandleFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, events.DynamoDBEventRecord, v2.Logger) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DynamoDBRecordHandlerInitializerHandleFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, events.DynamoDBEventRecord, v2.Logger) error {
		return r0
	})
}

func (f *DynamoDBRecordHandlerInitializerHandleFunc) nextHook() func(context.Context, events.DynamoDBEventRecord, v2.Logger) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DynamoDBRecordHandlerInitializerHandleFunc) appendCall(r0 DynamoDBRecordHandlerInitializerHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// DynamoDBRecordHandlerInitializerHandleFuncCall objects describing the
// invocations of this function.
func (f *DynamoDBRecordHandlerInitializerHandleFunc) History() []DynamoDBRecordHandlerInitializerHandleFuncCall {
	f.mutex.Lock()
	history := make([]DynamoDBRecordHandlerInitializerHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DynamoDBRecordHandlerInitializerHandleFuncCall is an object that
// describes an invocation of method Handle on an instance of
// MockDynamoDBRecordHandlerInitializer.
type DynamoDBRecordHandlerInitializerHandleFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 events.DynamoDBEventRecord
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 v2.Logger
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DynamoDBRecordHandlerInitializerHandleFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DynamoDBRecordHandlerInitializerHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DynamoDBRecordHandlerInitializerInitFunc describes the behavior when the
// Init method of the parent MockDynamoDBRecordHandlerInitializer instance
// is invoked.
type DynamoDBRecordHandlerInitializerInitFunc struct {
	defaultHook func(context.Context) error
	hooks       []func(context.Context) error
	history     []DynamoDBRecordHandlerInitializerInitFuncCall
	mutex       sync.Mutex
}

// Init delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDynamoDBRecordHandlerInitializer) Init(v0 context.Context) error {
	r0 := m.InitFunc.nextHook()(v0)
	m.InitFunc.appendCall(DynamoDBRecordHandlerInitializerInitFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Init method of the
// parent MockDynamoDBRecordHandlerInitializer instance is invoked and the
// hook queue is empty.
func (f *DynamoDBRecordHandlerInitializerInitFunc) SetDefaultHook(hook func(context.Context) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Init method of the parent MockDynamoDBRecordHandlerInitializer instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *DynamoDBRecordHandlerInitializerInitFunc) PushHook(hook func(context.Context) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DynamoDBRecordHandlerInitializerInitFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DynamoDBRecordHandlerInitializerInitFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context) error {
		return r0
	})
}

func (f *DynamoDBRecordHandlerInitializerInitFunc) nextHook() func(context.Context) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DynamoDBRecordHandlerInitializerInitFunc) appendCall(r0 DynamoDBRecordHandlerInitializerInitFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// DynamoDBRecordHandlerInitializerInitFuncCall objects describing the
// invocations of this function.
func (f *DynamoDBRecordHandlerInitializerInitFunc) History() []DynamoDBRecordHandlerInitializerInitFuncCall {
	f.mutex.Lock()
	history := make([]DynamoDBRecordHandlerInitializerInitFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DynamoDBRecordHandlerInitializerInitFuncCall is an object that describes
// an invocation of method Init on an instance of
// MockDynamoDBRecordHandlerInitializer.
type DynamoDBRecordHandlerInitializerInitFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DynamoDBRecordHandlerInitializerInitFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DynamoDBRecordHandlerInitializerInitFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
